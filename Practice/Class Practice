# class Dog:
#     def __init__(self, name, age, breed):
#         self.name = name
#         self.age = age
#         self.breed = breed

# print(Dog.age)



# class MyClass:
#     variable = "string string"
#     def function(self):
#         print("This is a msg inside the class.")

# myobjectx = MyClass()

# myobjectx.variable

# print(myobjectx)

# class WeekdayIterator(object):
#     """Iterator over the weekdays."""
#     def __init__(self):
#         self.i=0           # Start from Monday
#         self.weekdays = ("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday")
#     def __iter__(self):    # If this object were a container, then this method would return the iterator over the 
#                            # elements of the container.
#         return self        # However, this object is already an iterator, hence we return self.
#     def __next__(self):    # Returns the next weekday
#         if self.i == 7:    
#             raise StopIteration # Signal that all weekdays were already iterated over
#         else:
#             weekday = self.weekdays[self.i]
#             self.i += 1
#             return weekday
        
# for w in WeekdayIterator():
#     print(w)

def mydate(day=1, month=1):   # Generates dates starting from the given date
    lengths=(31,28,31,30,31,30,31,31,30,31,30,31)   # How many days in a month
    first_day=day
    for m in range(month, 13):
        for d in range(first_day, lengths[m-1] + 1):
            yield (d, m)
        first_day=1
# Create the generator by calling the function:        
gen = mydate(26, 2)   # Start from 26th of February
for i, (day, month) in enumerate(gen):   
    if i == 5: break                 # Print only the first five dates from the generator
    print(f"Index {i}, day {day}, month {month}")