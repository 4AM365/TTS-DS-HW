# Exercise 1

# In mathematics, the quadratic equation ax2+bx+c=0 can be solved with the formula x=−b±b2−4ac√2a.

# Write a function solve_quadratic, that returns both solutions of a generic quadratic as a pair (2-tuple) when the coefficients are given as parameters. It should work like this:

# print(solve_quadratic(1,-3,2))
# (2.0,1.0)
# print(solve_quadratic(1,2,1))
# (-1.0,-1.0)

# You may want to use the math.sqrt function from the math module in your solution. Test that your function works in the main function!

#imports math library to simplify the square root function later
import math

#establish a definition so that we can call the subroutine later on whenever we need it, also helps us manage variables by keeping them in a container
#establishes a,b, and c which can be used to pass arguments into the subroutine
def quadratic(a, b, c):
#set up discriminant which is common to both equations to minimize processing
    d = (b*b) - (4*a*c)
    s1 = (-b-math.sqrt(d))/(2*a) 
    s2 = (-b+math.sqrt(d))/(2*a)
    #establishes a tuple container with the solutions to the equations
    out = s2, s1
    #return sends result back to the caller in the form of a tuple. The definition is the caller, not the terminal demanding a print
    return out
print(quadratic(1,-3,2))
print(quadratic(1,2,1))

# Exercise 2

# Get a space-separated list of integers from the user, create a tuple of those integers. Then compute and print the result of hash(tuple).

#Get list from user
list = input()
#Create tuple from list
tu = tuple(list)
#Create hash from tuple
tuh = hash(tu)
#Print hash
print(tuh)

# Documentation: hash():
# Exercise 3

# Take the following two lists. Create a third list by picking a odd-index elements from the first list and even-index elements from the second.

# listOne = [3, 6, 9, 12, 15, 18, 21]
# listTwo = [4, 8, 12, 16, 20, 24, 28]

# Exercise 4

# Take the following list. Slice it into three equal chunks and reverse each list.

# sampleList = [11, 45, 8, 23, 14, 12, 78, 45, 89]

# Exercise 5

# Iterate through a given list and check if a given element already exists in a dictionary as a key’s value. If not, delete it from the list.

# rollNumber = [47, 64, 69, 37, 76, 83, 95, 97]
# sampleDict ={'Zach':47, 'Emma':69, 'Kelly':76, 'Jason':97}
